-- Quad Bio Controler --
--   (C) Cheerleone
--   monitors battery status, operating charging engines when necessary
--   after charging is complete, engines enter an independent timed cooldown period

-- constants --
     sleepSeconds=127
     batterySide="left"
     engineSide="right"
     monitorRef="monitor_3"
     version="1.0.3.B"

-- functions --

function batteryFull(battColor)
  if colors.test(redstone.getBundledInput(batterySide), battColor) then
    return false
  else
    return true
  end
end

function enginesOn(engineColor)
  local c=0
  c=redstone.getBundledOutput(engineSide)
  c=colors.combine(c, engineColor)
  redstone.setBundledOutput(engineSide,c)
end

function enginesOff(engineColor)
  local c=0
  c=redstone.getBundledOutput(engineSide)
  c=colors.subtract(c, engineColor)
  redstone.setBundledOutput(engineSide,c)
end

function primeEngines()
  print("Priming Engines..")
  sleep(2)
  print("clearing rednet cable states..")
  redstone.setBundledOutput(batterySide,0)
  redstone.setBundledOutput(engineSide,0)
  sleep(2)
  print("turning engines on for 2 seconds..")
  enginesOn(colors.orange)
  enginesOn(colors.magenta)
  enginesOn(colors.lightBlue)
  enginesOn(colors.yellow)
  sleep(2)
  print("turning engines off..")
  enginesOff(colors.orange)
  enginesOff(colors.magenta)
  enginesOff(colors.lightBlue)
  enginesOff(colors.yellow)
  sleep(2)
  print("Engines Primed!")
  sleep(1)
end

function writeMon(text)
  peripheral.call(monitorRef, "write",text)
end

function clearMon()
  peripheral.call(monitorRef, "clear") 
  peripheral.call(monitorRef, "setCursorPos",1,1)
end

function setCursorYMon(y)
  peripheral.call(monitorRef, "setCursorPos",1,y)
end

function displayHeader()
  local str=""
  clearMon()
  writeMon("       Over-Complicated")
  setCursorYMon(2)
  writeMon("      Power Systems Inc.")
  setCursorYMon(3)
  writeMon("-----------------------------")
end

function displayBody(line, state, color, timer)
  local str=""
  setCursorYMon(line)
  if state == "standby" then
    str=color..": Standby"
  elseif state == "charging" then
    str=color..": Charging"
  elseif state == "cooldown" then
    str=color..": Cooldown "..timer.." Secs."
  end
  writeMon(str)
end

function displayFooter(line)
  setCursorYMon(line)
  writeMon("-----------------------------")
  setCursorYMon(line+1)
  writeMon("   (C) CheerLeone v"..version)
end

function checkCharge(state, timer, color)
  if state == "standby" then
    if not batteryFull(color) then
      enginesOn(color)
      state = "charging"
    end
  elseif state == "charging" then
    if batteryFull(color) then
      enginesOff(color)
      timer=sleepSeconds
      state = "cooldown"
    end
  elseif state == "cooldown" then
    if timer == 0 then
      state = "standby"
    else
      timer = timer -1
    end
  end
  return state, timer
end

-- main function --

function main()
  local orangeTimer = 0
  local magentaTimer = 0
  local lightBlueTimer = 0
  local yellowTimer = 0
  local orangeState = "standby"
  local magentaState = "standby"
  local lightBlueState = "standby"
  local yellowState = "standby"

  term.clear()
  term.setCursorPos(1,1)
  primeEngines()
  print("Entering Run State.")

  while true do
    orangeState, orangeTimer = checkCharge(orangeState, orangeTimer, colors.orange)
    magentaState, magentaTimer = checkCharge(magentaState, magentaTimer, colors.magenta)
    lightBlueState, lightBlueTimer = checkCharge(lightBlueState, lightBlueTimer, colors.lightBlue)
    yellowState, yellowTimer = checkCharge(yellowState, yellowTimer, colors.yellow)

    displayHeader()
    displayBody(5, orangeState, " Orange ", orangeTimer)
    displayBody(6, magentaState, " Magenta", magentaTimer)
    displayBody(7, lightBlueState, " Lt Blue", lightBlueTimer)
    displayBody(8, yellowState, " Yellow ", yellowTimer)
    displayFooter(11)

    sleep(1)
  end
end

main()

-- end
